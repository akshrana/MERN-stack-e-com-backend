{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","change","e","target","name","setState","defineProperty","value","files","submit","formData","FormData","append","state","pname","pcat","price","i","file","length","axios","post","headers","content-type","then","res","console","log","data","_this2","react_default","a","createElement","className","type","onChange","multiple","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,yNC8DzBC,cAxDf,SAAAA,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACbC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAKAI,OAAO,SAACC,GAEY,QAAfA,EAAEC,OAAOC,KACdV,EAAKW,SAALV,OAAAW,EAAA,EAAAX,CAAA,GAAgBO,EAAEC,OAAOC,KAAMF,EAAEC,OAAOI,QAGtCb,EAAKW,SAALV,OAAAW,EAAA,EAAAX,CAAA,GAAgBO,EAAEC,OAAOC,KAAMF,EAAEC,OAAOK,SAZ7Bd,EAiBbe,OAAO,WAEP,IAAIC,EAAU,IAAIC,SAClBD,EAASE,OAAO,QAAQlB,EAAKmB,MAAMC,OACnCJ,EAASE,OAAO,OAAOlB,EAAKmB,MAAME,MAClCL,EAASE,OAAO,QAAQlB,EAAKmB,MAAMG,OACnC,IAAI,IAAIC,EAAE,EAAEA,EAAEvB,EAAKmB,MAAMK,KAAKC,OAAOF,IAGrCP,EAASE,OAAO,OAAOlB,EAAKmB,MAAMK,KAAKD,IAIvCG,IAAMC,KAAK,OAAOX,EAFF,CAACY,QAAQ,CAACC,eAAe,yBAIxCC,KAAK,SAAAC,GAGNC,QAAQC,IAAIF,EAAIG,SAjChBlC,EAAKmB,MAAM,CAACC,MAAM,GAAGC,KAAK,GAAGG,KAAK,KAAKF,MAAM,GAFhCtB,wEAyCH,IAAAmC,EAAAhC,KAAC,OACPiC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAf,qBAEAH,EAAAC,EAAAC,cAAA,SAAOE,KAAK,OAAO9B,KAAK,QAAQ+B,SAAUtC,KAAKI,SAAS6B,EAAAC,EAAAC,cAAA,WAFxD,yBAIAF,EAAAC,EAAAC,cAAA,SAAOE,KAAK,OAAO9B,KAAK,OAAO+B,SAAUtC,KAAKI,SAAS6B,EAAAC,EAAAC,cAAA,WAJvD,sBAMAF,EAAAC,EAAAC,cAAA,SAAOE,KAAK,SAAS9B,KAAK,QAAQ+B,SAAUtC,KAAKI,SAAS6B,EAAAC,EAAAC,cAAA,WAN1D,uBAQEF,EAAAC,EAAAC,cAAA,SAAOE,KAAM,OAAO9B,KAAK,OAAO+B,SAAUtC,KAAKI,OAAQmC,UAAQ,IAAEN,EAAAC,EAAAC,cAAA,WACrEF,EAAAC,EAAAC,cAAA,UAAQK,QAAS,WAAKR,EAAKpB,WAA3B,kBApDgB6B,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOf,EAAAC,EAAAC,cAACc,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3B,KAAK,SAAA4B,GACjCA,EAAaC","file":"static/js/main.3d6bf50c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React,{Component} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport axios from 'axios'\nclass App extends Component {\nconstructor(){\nsuper();\nthis.state={pname:\"\",pcat:\"\",file:null,price:0}\n\n\n}\nchange=(e)=>{\n\n  if(e.target.name!=\"file\")\nthis.setState({[e.target.name]:e.target.value})\nelse\n{\n  this.setState({[e.target.name]:e.target.files})\n}\n\n}\n\nsubmit=()=>{\n\nvar formData= new FormData();\nformData.append('pname',this.state.pname)\nformData.append('pcat',this.state.pcat)\nformData.append('price',this.state.price)\nfor(var i=0;i<this.state.file.length;i++)\n{\n  \nformData.append('file',this.state.file[i])\n}\nvar contenttype={headers:{\"content-type\":\"multipart/form-data\"}};\n\naxios.post('/sub',formData,contenttype)\n\n.then(res=>{\n\n\nconsole.log(res.data);\n\n\n })\n\n}\n  render(){return (\n    <div className=\"App\">\n enter product name\n    <input type=\"text\" name=\"pname\" onChange={this.change}/><br/>\nenter product category\n    <input type=\"text\" name=\"pcat\" onChange={this.change}/><br/>\n    enter product price\n    <input type=\"number\" name=\"price\" onChange={this.change}/><br/>\nenter product images\n      <input type =\"file\" name=\"file\" onChange={this.change} multiple/><br/>\n  <button onClick={()=>{this.submit()}}>submit</button>\n    </div>\n  );\n}\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}